    int gamma(const GameState &pState, uint8_t currentPlayer) {
        int x = 0;
        int y = 0;
        int z = 0;
        int maxVal = 0;
        int val = 0;
        uint8_t oppCtr = 0;
        uint8_t currCtr = 0;
        uint8_t mtCtr = 0;

//        std::cerr << "I am here now 1" << std::endl;
        if (pState.isEOG()) {
            //Game over. Return something large
            return 99999;
        }
        if (currentPlayer == CELL_X) {

//            std::cerr << "I am here now" << std::endl;
            //columns, layer by layer
            for (z = 0; z < 4; z++) {
                for (x = 0; x < 4; x++) {
                    val = 0;
                    currCtr = 0;
                    mtCtr = 0;
                    oppCtr = 0;
                    for (y = 0; y < 4; y++) {
                        switch (pState.at(x, y, z)) {
                            case CELL_X:
                                currCtr++;
                                break;
                            case CELL_EMPTY:
                                mtCtr++;
                                break;
                            default:
                                oppCtr++;
                                break;
                        }
                    }
                    if (oppCtr == 3 && currCtr == 1) {
                        val = 1000;
                    } else if (currCtr == 3 && mtCtr == 1) {
                        val = 900;
                    } else if (currCtr == 2 && mtCtr == 2) {
                        val = 700;
                    } else if (currCtr == 1 && mtCtr == 3) {
                        val = 500;
                    }
                    if (val > maxVal) {
                        maxVal = val;
                    }
                }
            }

            //rows layer by layer
            for (z = 0; z < 4; z++) {
                for (y = 0; y < 4; y++) {
                    val = 0;
                    currCtr = 0;
                    mtCtr = 0;
                    oppCtr = 0;
                    for (x = 0; x < 4; x++) {
                        switch (pState.at(x, y, z)) {
                            case CELL_X:
                                currCtr++;
                                break;
                            case CELL_EMPTY:
                                mtCtr++;
                                break;
                            default:
                                oppCtr++;
                                break;
                        }
                    }
                    if (oppCtr == 3 && currCtr == 1) {
                        val = 1000;
                    } else if (currCtr == 3 && mtCtr == 1) {
                        val = 900;
                    } else if (currCtr == 2 && mtCtr == 2) {
                        val = 700;
                    } else if (currCtr == 1 && mtCtr == 3) {
                        val = 500;
                    }
                    if (val > maxVal) {
                        maxVal = val;
                    }
                }
            }
            //z pipe layer by layer (z pipes on xy plane))
            for (x = 0; x < 4; x++) {
                for (y = 0; y < 4; y++) {
                    val = 0;
                    currCtr = 0;
                    mtCtr = 0;
                    oppCtr = 0;
                    for (z = 0; z < 4; z++) {
                        switch (pState.at(x, y, z)) {
                            case CELL_X:
                                currCtr++;
                                break;
                            case CELL_EMPTY:
                                mtCtr++;
                                break;
                            default:
                                oppCtr++;
                                break;
                        }
                    }
                    if (oppCtr == 3 && currCtr == 1) {
                        val = 1000;
                    } else if (currCtr == 3 && mtCtr == 1) {
                        val = 900;
                    } else if (currCtr == 2 && mtCtr == 2) {
                        val = 700;
                    } else if (currCtr == 1 && mtCtr == 3) {
                        val = 500;
                    }
                    if (val > maxVal) {
                        maxVal = val;
                    }
                }
            }

            //diagonals in xy plane
            for (z = 0; z < 4; z++) {
                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (x = 0; x < 4; x++) {
                    switch (pState.at(x, x, z)) {
                        case CELL_X:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }

                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (x = 3; x >= 0; x--) {
                    switch (pState.at(x, 3 - x, z)) {
                        case CELL_X:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }
            }
            //diagonals in yz plane
            for (x = 0; x < 4; x++) {
                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (y = 0; y < 4; y++) {
                    switch (pState.at(x, y, y)) {
                        case CELL_X:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }

                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (y = 3; y >= 0; y--) {
                    switch (pState.at(x, 3 - y, y)) {
                        case CELL_X:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }
            }
            //diagnoals in xz plane
            for (y = 0; y < 4; y++) {
                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (x = 0; x < 4; x++) {
                    switch (pState.at(x, y, x)) {
                        case CELL_X:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }

                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (x = 3; x >= 0; x--) {
                    switch (pState.at(x, y, 3 - x)) {
                        case CELL_X:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }
            }
            val = 0;
            currCtr = 0;
            mtCtr = 0;
            oppCtr = 0;
            //main diagonals (1)
            for (z = 0; z < 4; z++) {
                switch (pState.at(z, z, z)) {
                    case CELL_X:
                        currCtr++;
                        break;
                    case CELL_EMPTY:
                        mtCtr++;
                        break;
                    default:
                        oppCtr++;
                        break;
                }
            }
            if (oppCtr == 3 && currCtr == 1) {
                val = 1000;
            } else if (currCtr == 3 && mtCtr == 1) {
                val = 900;
            } else if (currCtr == 2 && mtCtr == 2) {
                val = 700;
            } else if (currCtr == 1 && mtCtr == 3) {
                val = 500;
            }
            if (val > maxVal) {
                maxVal = val;
            }
            val = 0;
            currCtr = 0;
            mtCtr = 0;
            oppCtr = 0;
            //main diagonals (2)
            for (x = 0; x < 4; x++) {
                switch (pState.at(x, 3 - x, 3 - x)) {
                    case CELL_X:
                        currCtr++;
                        break;
                    case CELL_EMPTY:
                        mtCtr++;
                        break;
                    default:
                        oppCtr++;
                        break;
                }
            }
            if (oppCtr == 3 && currCtr == 1) {
                val = 1000;
            } else if (currCtr == 3 && mtCtr == 1) {
                val = 900;
            } else if (currCtr == 2 && mtCtr == 2) {
                val = 700;
            } else if (currCtr == 1 && mtCtr == 3) {
                val = 500;
            }
            if (val > maxVal) {
                maxVal = val;
            }
            val = 0;
            currCtr = 0;
            mtCtr = 0;
            oppCtr = 0;


            //main diagonals (3)
            for (y = 0; y < 4; y++) {
                switch (pState.at(3 - y, y, 3 - y)) {
                    case CELL_X:
                        currCtr++;
                        break;
                    case CELL_EMPTY:
                        mtCtr++;
                        break;
                    default:
                        oppCtr++;
                        break;
                }
            }
            if (oppCtr == 3 && currCtr == 1) {
                val = 1000;
            } else if (currCtr == 3 && mtCtr == 1) {
                val = 900;
            } else if (currCtr == 2 && mtCtr == 2) {
                val = 700;
            } else if (currCtr == 1 && mtCtr == 3) {
                val = 500;
            }
            if (val > maxVal) {
                maxVal = val;
            }
            val = 0;
            currCtr = 0;
            mtCtr = 0;
            oppCtr = 0;
            for (z = 0; z < 4; z++) {
                switch (pState.at(3 - z, 3 - z, z)) {
                    case CELL_X:
                        currCtr++;
                        break;
                    case CELL_EMPTY:
                        mtCtr++;
                        break;
                    default:
                        oppCtr++;
                        break;
                }
            }
            if (oppCtr == 3 && currCtr == 1) {
                val = 1000;
            } else if (currCtr == 3 && mtCtr == 1) {
                val = 900;
            } else if (currCtr == 2 && mtCtr == 2) {
                val = 700;
            } else if (currCtr == 1 && mtCtr == 3) {
                val = 500;
            }
            if (val > maxVal) {
                maxVal = val;
            }
            return maxVal;
        } else {

//            std::cerr << "I am here now CELL_O" << std::endl;
            //columns, layer by layer
            for (z = 0; z < 4; z++) {
                for (x = 0; x < 4; x++) {
                    val = 0;
                    currCtr = 0;
                    mtCtr = 0;
                    oppCtr = 0;
                    for (y = 0; y < 4; y++) {
                        switch (pState.at(x, y, z)) {
                            case CELL_O:
                                currCtr++;
                                break;
                            case CELL_EMPTY:
                                mtCtr++;
                                break;
                            default:
                                oppCtr++;
                                break;
                        }
                    }
                    if (oppCtr == 3 && currCtr == 1) {
                        val = 1000;
                    } else if (currCtr == 3 && mtCtr == 1) {
                        val = 900;
                    } else if (currCtr == 2 && mtCtr == 2) {
                        val = 700;
                    } else if (currCtr == 1 && mtCtr == 3) {
                        val = 500;
                    }
                    if (val > maxVal) {
                        maxVal = val;
                    }
                }
            }

//            std::cerr << "I am here now n-8" << std::endl;
            //rows layer by layer
            for (z = 0; z < 4; z++) {
                for (y = 0; y < 4; y++) {
                    val = 0;
                    currCtr = 0;
                    mtCtr = 0;
                    oppCtr = 0;
                    for (x = 0; x < 4; x++) {
                        switch (pState.at(x, y, z)) {
                            case CELL_O:
                                currCtr++;
                                break;
                            case CELL_EMPTY:
                                mtCtr++;
                                break;
                            default:
                                oppCtr++;
                                break;
                        }
                    }
                    if (oppCtr == 3 && currCtr == 1) {
                        val = 1000;
                    } else if (currCtr == 3 && mtCtr == 1) {
                        val = 900;
                    } else if (currCtr == 2 && mtCtr == 2) {
                        val = 700;
                    } else if (currCtr == 1 && mtCtr == 3) {
                        val = 500;
                    }
                    if (val > maxVal) {
                        maxVal = val;
                    }
                }
            }
//            std::cerr << "I am here now n-7" << std::endl;
            //z pipe layer by layer (z pipes on xy plane))
            for (x = 0; x < 4; x++) {
                for (y = 0; y < 4; y++) {
                    val = 0;
                    currCtr = 0;
                    mtCtr = 0;
                    oppCtr = 0;
                    for (z = 0; z < 4; z++) {
                        switch (pState.at(x, y, z)) {
                            case CELL_O:
                                currCtr++;
                                break;
                            case CELL_EMPTY:
                                mtCtr++;
                                break;
                            default:
                                oppCtr++;
                                break;
                        }
                    }
                    if (oppCtr == 3 && currCtr == 1) {
                        val = 1000;
                    } else if (currCtr == 3 && mtCtr == 1) {
                        val = 900;
                    } else if (currCtr == 2 && mtCtr == 2) {
                        val = 700;
                    } else if (currCtr == 1 && mtCtr == 3) {
                        val = 500;
                    }
                    if (val > maxVal) {
                        maxVal = val;
                    }
                }
            }

//            std::cerr << "I am here now n-6 maxval is" << maxVal << std::endl;
            //diagonals in xy plane
            for (z = 0; z < 4; z++) {

//                std::cerr << "Iloop1" << std::endl;
                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (x = 0; x < 4; x++) {
//                    std::cerr << "Iloop2" << std::endl;
                    switch (pState.at(x, x, z)) {
                        case CELL_O:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }

                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }

                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                x = 0;
                
                for (x = 3; x >= 0; x--) {
                    switch (pState.at(x, 3 - x, z)) {
                        case CELL_O:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }
            }

//            std::cerr << "I am here now n-5" << std::endl;
            //diagonals in yz plane
            for (x = 0; x < 4; x++) {
                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (y = 0; y < 4; y++) {
                    switch (pState.at(x, y, y)) {
                        case CELL_O:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }

                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (y = 3; y >= 0; y--) {
                    switch (pState.at(x, 3 - y, y)) {
                        case CELL_O:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }
            }
//            std::cerr << "I am here now n-4" << std::endl;
            //diagnoals in xz plane
            for (y = 0; y < 4; y++) {
                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (x = 0; x < 4; x++) {
                    switch (pState.at(x, y, x)) {
                        case CELL_O:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }

                val = 0;
                currCtr = 0;
                mtCtr = 0;
                oppCtr = 0;
                for (x = 3; x >= 0; x--) {
                    switch (pState.at(x, y, 3 - x)) {
                        case CELL_O:
                            currCtr++;
                            break;
                        case CELL_EMPTY:
                            mtCtr++;
                            break;
                        default:
                            oppCtr++;
                            break;
                    }

                }
                if (oppCtr == 3 && currCtr == 1) {
                    val = 1000;
                } else if (currCtr == 3 && mtCtr == 1) {
                    val = 900;
                } else if (currCtr == 2 && mtCtr == 2) {
                    val = 700;
                } else if (currCtr == 1 && mtCtr == 3) {
                    val = 500;
                }
                if (val > maxVal) {
                    maxVal = val;
                }
            }
            val = 0;
            currCtr = 0;
            mtCtr = 0;
            oppCtr = 0;
//            std::cerr << "I am here now n-3" << std::endl;
            //main diagonals (1)
            for (z = 0; z < 4; z++) {
                switch (pState.at(z, z, z)) {
                    case CELL_O:
                        currCtr++;
                        break;
                    case CELL_EMPTY:
                        mtCtr++;
                        break;
                    default:
                        oppCtr++;
                        break;
                }
            }
            if (oppCtr == 3 && currCtr == 1) {
                val = 1000;
            } else if (currCtr == 3 && mtCtr == 1) {
                val = 900;
            } else if (currCtr == 2 && mtCtr == 2) {
                val = 700;
            } else if (currCtr == 1 && mtCtr == 3) {
                val = 500;
            }
            if (val > maxVal) {
                maxVal = val;
            }
            val = 0;
            currCtr = 0;
            mtCtr = 0;
            oppCtr = 0;

//            std::cerr << "I am here now n-2" << std::endl;
            //main diagonals (2)
            for (x = 0; x < 4; x++) {
                switch (pState.at(x, 3 - x, 3 - x)) {
                    case CELL_O:
                        currCtr++;
                        break;
                    case CELL_EMPTY:
                        mtCtr++;
                        break;
                    default:
                        oppCtr++;
                        break;
                }
            }
            if (oppCtr == 3 && currCtr == 1) {
                val = 1000;
            } else if (currCtr == 3 && mtCtr == 1) {
                val = 900;
            } else if (currCtr == 2 && mtCtr == 2) {
                val = 700;
            } else if (currCtr == 1 && mtCtr == 3) {
                val = 500;
            }
            if (val > maxVal) {
                maxVal = val;
            }
            val = 0;
            currCtr = 0;
            mtCtr = 0;
            oppCtr = 0;

//            std::cerr << "I am here now n-1" << std::endl;
            //main diagonals (3)
            for (y = 0; y < 4; y++) {
                switch (pState.at(3 - y, y, 3 - y)) {
                    case CELL_O:
                        currCtr++;
                        break;
                    case CELL_EMPTY:
                        mtCtr++;
                        break;
                    default:
                        oppCtr++;
                        break;
                }
            }
            if (oppCtr == 3 && currCtr == 1) {
                val = 1000;
            } else if (currCtr == 3 && mtCtr == 1) {
                val = 900;
            } else if (currCtr == 2 && mtCtr == 2) {
                val = 700;
            } else if (currCtr == 1 && mtCtr == 3) {
                val = 500;
            }
            if (val > maxVal) {
                maxVal = val;
            }
            val = 0;
            currCtr = 0;
            mtCtr = 0;
            oppCtr = 0;
            for (z = 0; z < 4; z++) {
                switch (pState.at(3 - z, 3 - z, z)) {
                    case CELL_O:
                        currCtr++;
                        break;
                    case CELL_EMPTY:
                        mtCtr++;
                        break;
                    default:
                        oppCtr++;
                        break;
                }
            }
            if (oppCtr == 3 && currCtr == 1) {
                val = 1000;
            } else if (currCtr == 3 && mtCtr == 1) {
                val = 900;
            } else if (currCtr == 2 && mtCtr == 2) {
                val = 700;
            } else if (currCtr == 1 && mtCtr == 3) {
                val = 500;
            }
            if (val > maxVal) {
                maxVal = val;
            }
            return maxVal;

//            std::cerr << "I am here now n" << std::endl;
        }
    }